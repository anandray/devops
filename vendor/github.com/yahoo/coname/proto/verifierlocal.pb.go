// Code generated by protoc-gen-gogo.
// source: verifierlocal.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/maditya/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/maditya/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import github_com_maditya_protobuf_proto "github.com/maditya/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Verifier contains the persistent internal state of a verifier.
// Additional on-disk state is described in verifier/table.go.
type VerifierState struct {
	NextIndex           uint64               `protobuf:"varint,1,opt,name=next_index,json=nextIndex,proto3" json:"next_index,omitempty"`
	NextEpoch           uint64               `protobuf:"varint,2,opt,name=next_epoch,json=nextEpoch,proto3" json:"next_epoch,omitempty"`
	PreviousSummaryHash []byte               `protobuf:"bytes,3,opt,name=previous_summary_hash,json=previousSummaryHash,proto3" json:"previous_summary_hash,omitempty"`
	LatestTreeSnapshot  uint64               `protobuf:"varint,4,opt,name=latest_tree_snapshot,json=latestTreeSnapshot,proto3" json:"latest_tree_snapshot,omitempty"`
	KeyserverAuth       *AuthorizationPolicy `protobuf:"bytes,5,opt,name=keyserver_auth,json=keyserverAuth" json:"keyserver_auth,omitempty"`
}

func (m *VerifierState) Reset()                    { *m = VerifierState{} }
func (*VerifierState) ProtoMessage()               {}
func (*VerifierState) Descriptor() ([]byte, []int) { return fileDescriptorVerifierlocal, []int{0} }

func (m *VerifierState) GetKeyserverAuth() *AuthorizationPolicy {
	if m != nil {
		return m.KeyserverAuth
	}
	return nil
}

func init() {
	proto1.RegisterType((*VerifierState)(nil), "proto.VerifierState")
}
func (this *VerifierState) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*VerifierState)
	if !ok {
		that2, ok := that.(VerifierState)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *VerifierState")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *VerifierState but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *VerifierState but is not nil && this == nil")
	}
	if this.NextIndex != that1.NextIndex {
		return fmt.Errorf("NextIndex this(%v) Not Equal that(%v)", this.NextIndex, that1.NextIndex)
	}
	if this.NextEpoch != that1.NextEpoch {
		return fmt.Errorf("NextEpoch this(%v) Not Equal that(%v)", this.NextEpoch, that1.NextEpoch)
	}
	if !bytes.Equal(this.PreviousSummaryHash, that1.PreviousSummaryHash) {
		return fmt.Errorf("PreviousSummaryHash this(%v) Not Equal that(%v)", this.PreviousSummaryHash, that1.PreviousSummaryHash)
	}
	if this.LatestTreeSnapshot != that1.LatestTreeSnapshot {
		return fmt.Errorf("LatestTreeSnapshot this(%v) Not Equal that(%v)", this.LatestTreeSnapshot, that1.LatestTreeSnapshot)
	}
	if !this.KeyserverAuth.Equal(that1.KeyserverAuth) {
		return fmt.Errorf("KeyserverAuth this(%v) Not Equal that(%v)", this.KeyserverAuth, that1.KeyserverAuth)
	}
	return nil
}
func (this *VerifierState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VerifierState)
	if !ok {
		that2, ok := that.(VerifierState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.NextIndex != that1.NextIndex {
		return false
	}
	if this.NextEpoch != that1.NextEpoch {
		return false
	}
	if !bytes.Equal(this.PreviousSummaryHash, that1.PreviousSummaryHash) {
		return false
	}
	if this.LatestTreeSnapshot != that1.LatestTreeSnapshot {
		return false
	}
	if !this.KeyserverAuth.Equal(that1.KeyserverAuth) {
		return false
	}
	return true
}
func (this *VerifierState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.VerifierState{")
	s = append(s, "NextIndex: "+fmt.Sprintf("%#v", this.NextIndex)+",\n")
	s = append(s, "NextEpoch: "+fmt.Sprintf("%#v", this.NextEpoch)+",\n")
	s = append(s, "PreviousSummaryHash: "+fmt.Sprintf("%#v", this.PreviousSummaryHash)+",\n")
	s = append(s, "LatestTreeSnapshot: "+fmt.Sprintf("%#v", this.LatestTreeSnapshot)+",\n")
	if this.KeyserverAuth != nil {
		s = append(s, "KeyserverAuth: "+fmt.Sprintf("%#v", this.KeyserverAuth)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVerifierlocal(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringVerifierlocal(m github_com_maditya_protobuf_proto.Message) string {
	e := github_com_maditya_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *VerifierState) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VerifierState) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NextIndex != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintVerifierlocal(data, i, uint64(m.NextIndex))
	}
	if m.NextEpoch != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintVerifierlocal(data, i, uint64(m.NextEpoch))
	}
	if len(m.PreviousSummaryHash) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintVerifierlocal(data, i, uint64(len(m.PreviousSummaryHash)))
		i += copy(data[i:], m.PreviousSummaryHash)
	}
	if m.LatestTreeSnapshot != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintVerifierlocal(data, i, uint64(m.LatestTreeSnapshot))
	}
	if m.KeyserverAuth != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintVerifierlocal(data, i, uint64(m.KeyserverAuth.Size()))
		n1, err := m.KeyserverAuth.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeFixed64Verifierlocal(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Verifierlocal(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintVerifierlocal(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedVerifierState(r randyVerifierlocal, easy bool) *VerifierState {
	this := &VerifierState{}
	this.NextIndex = uint64(uint64(r.Uint32()))
	this.NextEpoch = uint64(uint64(r.Uint32()))
	v1 := r.Intn(100)
	this.PreviousSummaryHash = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.PreviousSummaryHash[i] = byte(r.Intn(256))
	}
	this.LatestTreeSnapshot = uint64(uint64(r.Uint32()))
	if r.Intn(10) == 0 {
		this.KeyserverAuth = NewPopulatedAuthorizationPolicy(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyVerifierlocal interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneVerifierlocal(r randyVerifierlocal) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringVerifierlocal(r randyVerifierlocal) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneVerifierlocal(r)
	}
	return string(tmps)
}
func randUnrecognizedVerifierlocal(r randyVerifierlocal, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldVerifierlocal(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldVerifierlocal(data []byte, r randyVerifierlocal, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateVerifierlocal(data, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		data = encodeVarintPopulateVerifierlocal(data, uint64(v3))
	case 1:
		data = encodeVarintPopulateVerifierlocal(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateVerifierlocal(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateVerifierlocal(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateVerifierlocal(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateVerifierlocal(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *VerifierState) Size() (n int) {
	var l int
	_ = l
	if m.NextIndex != 0 {
		n += 1 + sovVerifierlocal(uint64(m.NextIndex))
	}
	if m.NextEpoch != 0 {
		n += 1 + sovVerifierlocal(uint64(m.NextEpoch))
	}
	l = len(m.PreviousSummaryHash)
	if l > 0 {
		n += 1 + l + sovVerifierlocal(uint64(l))
	}
	if m.LatestTreeSnapshot != 0 {
		n += 1 + sovVerifierlocal(uint64(m.LatestTreeSnapshot))
	}
	if m.KeyserverAuth != nil {
		l = m.KeyserverAuth.Size()
		n += 1 + l + sovVerifierlocal(uint64(l))
	}
	return n
}

func sovVerifierlocal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVerifierlocal(x uint64) (n int) {
	return sovVerifierlocal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VerifierState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifierState{`,
		`NextIndex:` + fmt.Sprintf("%v", this.NextIndex) + `,`,
		`NextEpoch:` + fmt.Sprintf("%v", this.NextEpoch) + `,`,
		`PreviousSummaryHash:` + fmt.Sprintf("%v", this.PreviousSummaryHash) + `,`,
		`LatestTreeSnapshot:` + fmt.Sprintf("%v", this.LatestTreeSnapshot) + `,`,
		`KeyserverAuth:` + strings.Replace(fmt.Sprintf("%v", this.KeyserverAuth), "AuthorizationPolicy", "AuthorizationPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVerifierlocal(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VerifierState) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifierlocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifierState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifierState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextIndex", wireType)
			}
			m.NextIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifierlocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NextIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEpoch", wireType)
			}
			m.NextEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifierlocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NextEpoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousSummaryHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifierlocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVerifierlocal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousSummaryHash = append(m.PreviousSummaryHash[:0], data[iNdEx:postIndex]...)
			if m.PreviousSummaryHash == nil {
				m.PreviousSummaryHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestTreeSnapshot", wireType)
			}
			m.LatestTreeSnapshot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifierlocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LatestTreeSnapshot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyserverAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifierlocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifierlocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyserverAuth == nil {
				m.KeyserverAuth = &AuthorizationPolicy{}
			}
			if err := m.KeyserverAuth.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifierlocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerifierlocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVerifierlocal(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVerifierlocal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerifierlocal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerifierlocal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVerifierlocal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVerifierlocal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVerifierlocal(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVerifierlocal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVerifierlocal   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("verifierlocal.proto", fileDescriptorVerifierlocal) }

var fileDescriptorVerifierlocal = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0xcf, 0x31, 0x4f, 0x22, 0x41,
	0x14, 0x07, 0x70, 0xde, 0x1d, 0x5c, 0x72, 0x7b, 0x70, 0xc5, 0xa2, 0xc9, 0x86, 0xc4, 0x09, 0xb1,
	0xa2, 0x02, 0x82, 0x8d, 0x2d, 0x26, 0x26, 0xda, 0x19, 0x30, 0xb6, 0x9b, 0x61, 0x79, 0x30, 0x13,
	0x77, 0x77, 0x36, 0x33, 0x6f, 0x09, 0x6b, 0xe5, 0xc7, 0xf1, 0x23, 0x58, 0x5a, 0x5a, 0x52, 0x5a,
	0xb2, 0x53, 0x59, 0x52, 0x19, 0x4b, 0xb3, 0xbb, 0x88, 0xd5, 0xcc, 0xfb, 0xff, 0xf2, 0xfe, 0x93,
	0x71, 0xda, 0x2b, 0xd4, 0x72, 0x21, 0x51, 0x87, 0x2a, 0xe0, 0x61, 0x3f, 0xd1, 0x8a, 0x94, 0xdb,
	0x28, 0x8f, 0xce, 0x70, 0x29, 0x49, 0xa4, 0xb3, 0x7e, 0xa0, 0xa2, 0x41, 0xc4, 0xe7, 0x92, 0x32,
	0x3e, 0x28, 0x65, 0x96, 0x2e, 0x06, 0x4b, 0xb5, 0x54, 0xe5, 0x50, 0xde, 0xaa, 0xc5, 0x4e, 0x33,
	0x08, 0x25, 0xc6, 0x54, 0x4d, 0xa7, 0x1f, 0xe0, 0xb4, 0xee, 0xf6, 0xf5, 0x53, 0xe2, 0x84, 0xee,
	0x89, 0xe3, 0xc4, 0xb8, 0x26, 0x5f, 0xc6, 0x73, 0x5c, 0x7b, 0xd0, 0x85, 0x5e, 0x7d, 0xf2, 0xb7,
	0x48, 0xae, 0x8b, 0xe0, 0xc0, 0x98, 0xa8, 0x40, 0x78, 0xbf, 0x7e, 0xf8, 0xb2, 0x08, 0xdc, 0x91,
	0x73, 0x9c, 0x68, 0x5c, 0x49, 0x95, 0x1a, 0xdf, 0xa4, 0x51, 0xc4, 0x75, 0xe6, 0x0b, 0x6e, 0x84,
	0xf7, 0xbb, 0x0b, 0xbd, 0xe6, 0xa4, 0xfd, 0x8d, 0xd3, 0xca, 0xae, 0xb8, 0x11, 0xee, 0xd0, 0x39,
	0x0a, 0x39, 0xa1, 0x21, 0x9f, 0x34, 0xa2, 0x6f, 0x62, 0x9e, 0x18, 0xa1, 0xc8, 0xab, 0x97, 0xe5,
	0x6e, 0x65, 0xb7, 0x1a, 0x71, 0xba, 0x17, 0x77, 0xec, 0xfc, 0xbf, 0xc7, 0xcc, 0xa0, 0x5e, 0xa1,
	0xf6, 0x79, 0x4a, 0xc2, 0x6b, 0x74, 0xa1, 0xf7, 0x6f, 0xd4, 0xa9, 0x7e, 0xd5, 0x1f, 0xa7, 0x24,
	0x94, 0x96, 0x0f, 0x9c, 0xa4, 0x8a, 0x6f, 0x54, 0x28, 0x83, 0x6c, 0xd2, 0x3a, 0x6c, 0x14, 0x7a,
	0x71, 0xbe, 0xc9, 0x59, 0xed, 0x2d, 0x67, 0xb5, 0x6d, 0xce, 0x60, 0x97, 0x33, 0xf8, 0xcc, 0x19,
	0x3c, 0x5a, 0x06, 0x4f, 0x96, 0xc1, 0xb3, 0x65, 0xf0, 0x62, 0x19, 0xbc, 0x5a, 0x06, 0x1b, 0xcb,
	0x60, 0x6b, 0x19, 0xbc, 0x5b, 0x56, 0xdb, 0x59, 0x06, 0xb3, 0x3f, 0xe5, 0x1b, 0x67, 0x5f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x43, 0x87, 0xb1, 0xc6, 0x97, 0x01, 0x00, 0x00,
}
