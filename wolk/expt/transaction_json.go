// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package wolk

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*transactionMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (t Transaction) MarshalJSON() ([]byte, error) {
	type Transaction struct {
		TransactionType hexutil.Uint64 `json:"transactionType"        gencodec:"required"`
		Recipient       common.Address `json:"recipient,omitempty"    gencodec:"required"`
		Amount          hexutil.Uint64 `json:"amount,omitempty"       gencodec:"required"`
		Node            hexutil.Uint64 `json:"node,omitempty"         gencodec:"required"`
		GenericHash     common.Hash    `json:"hash,omitempty"         gencodec:"required"`
		IP              hexutil.Bytes  `json:"ip,omitempty"           gencodec:"required"`
		ConsensusIP     hexutil.Bytes  `json:"consensusip,omitempty"  gencodec:"required"`
		Region          hexutil.Uint64 `json:"region,omitempty"       gencodec:"required"`
		Collection      hexutil.Bytes  `json:"collection,omitempty"   gencodec:"required"`
		Key             hexutil.Bytes  `json:"key,omitempty"          gencodec:"required"`
		Sig             hexutil.Bytes  `json:"sig,omitempty"`
		QueryData       hexutil.Bytes  `json:"querydata,omitempty" gencodec:"required"`
		Hash            common.Hash    `json:"txhash"`
	}
	var enc Transaction
	enc.TransactionType = hexutil.Uint64(t.TransactionType)
	enc.Recipient = t.Recipient
	enc.Amount = hexutil.Uint64(t.Amount)
	enc.Node = hexutil.Uint64(t.Node)
	enc.GenericHash = t.GenericHash
	enc.IP = t.IP
	enc.ConsensusIP = t.ConsensusIP
	enc.Region = hexutil.Uint64(t.Region)
	enc.Collection = t.Collection
	enc.Key = t.Key
	enc.Sig = t.Sig
	enc.QueryData = t.QueryData
	enc.Hash = t.Hash()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *Transaction) UnmarshalJSON(input []byte) error {
	type Transaction struct {
		TransactionType *hexutil.Uint64 `json:"transactionType"        gencodec:"required"`
		Recipient       *common.Address `json:"recipient,omitempty"    gencodec:"required"`
		Amount          *hexutil.Uint64 `json:"amount,omitempty"       gencodec:"required"`
		Node            *hexutil.Uint64 `json:"node,omitempty"         gencodec:"required"`
		GenericHash     *common.Hash    `json:"hash,omitempty"         gencodec:"required"`
		IP              *hexutil.Bytes  `json:"ip,omitempty"           gencodec:"required"`
		ConsensusIP     *hexutil.Bytes  `json:"consensusip,omitempty"  gencodec:"required"`
		Region          *hexutil.Uint64 `json:"region,omitempty"       gencodec:"required"`
		Collection      *hexutil.Bytes  `json:"collection,omitempty"   gencodec:"required"`
		Key             *hexutil.Bytes  `json:"key,omitempty"          gencodec:"required"`
		Sig             *hexutil.Bytes  `json:"sig,omitempty"`
		QueryData       *hexutil.Bytes  `json:"querydata,omitempty" gencodec:"required"`
	}
	var dec Transaction
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.TransactionType == nil {
		return errors.New("missing required field 'transactionType' for Transaction")
	}
	t.TransactionType = uint64(*dec.TransactionType)
	if dec.Recipient == nil {
		return errors.New("missing required field 'recipient' for Transaction")
	}
	t.Recipient = *dec.Recipient
	if dec.Amount == nil {
		return errors.New("missing required field 'amount' for Transaction")
	}
	t.Amount = uint64(*dec.Amount)
	if dec.Node == nil {
		return errors.New("missing required field 'node' for Transaction")
	}
	t.Node = uint64(*dec.Node)
	if dec.GenericHash == nil {
		return errors.New("missing required field 'hash' for Transaction")
	}
	t.GenericHash = *dec.GenericHash
	if dec.IP == nil {
		return errors.New("missing required field 'ip' for Transaction")
	}
	t.IP = *dec.IP
	if dec.ConsensusIP == nil {
		return errors.New("missing required field 'consensusip' for Transaction")
	}
	t.ConsensusIP = *dec.ConsensusIP
	if dec.Region == nil {
		return errors.New("missing required field 'region' for Transaction")
	}
	t.Region = uint8(*dec.Region)
	if dec.Collection == nil {
		return errors.New("missing required field 'collection' for Transaction")
	}
	t.Collection = *dec.Collection
	if dec.Key == nil {
		return errors.New("missing required field 'key' for Transaction")
	}
	t.Key = *dec.Key
	if dec.Sig != nil {
		t.Sig = *dec.Sig
	}
	if dec.QueryData == nil {
		return errors.New("missing required field 'querydata' for Transaction")
	}
	t.QueryData = *dec.QueryData
	return nil
}
