@version:3.5
@include "scl.conf"

# syslog-ng configuration file.
#
# This should behave pretty much like the original syslog on RedHat. But
# it could be configured a lot smarter.
#
# See syslog-ng(8) and syslog-ng.conf(5) for more information.
#
# Note: it also sources additional configuration files (*.conf)
#       located in /etc/syslog-ng/conf.d/

#options {
#	flush_lines (500);
#	time_reopen (10);
#        log_fetch_limit (500);
#        log_iw_size(1000000);          ## log-iw-size() must be > max-connections(1000) * log-fetch-limit(100)
#        log_fifo_size(10000000);          ## log_fifo_size >= log-iw-size()
#	long_hostnames (off);
#	use_dns (no);
#	use_fqdn (no);
#	create_dirs (yes);
#	keep_hostname (yes);
## new
#	frac-digits(3);
##	log-fetch-limit(1000);
#};

options {
    flush_lines (0);
    time_reopen (10);
    log_fifo_size (1000);
    chain_hostnames (off);
    use_dns (no);
    use_fqdn (no);
    create_dirs (no);
    keep_hostname (yes);
    frac-digits(3);
};

source s_sys {
	file ("/proc/kmsg" program_override("kernel: "));
	unix-stream ("/dev/log");
	internal();
        tcp(ip(0.0.0.0) port(5000));
};

# trap incoming logs on tcp port 5000                                                                                                                                                                      
source s_tcp_net {
        tcp(ip(0.0.0.0) port(5000) max-connections(1000));
};

source s_all {
	internal();
	unix-stream("/dev/log");
	file("/proc/kmsg" log_prefix("kernel: "));
	udp();
	tcp(ip(0.0.0.0) port(5000));
};


#destination d_cons { file("/dev/console"); };
#destination d_mesg { file("/var/log/messages"); };
#destination d_auth { file("/var/log/secure"); };
#destination d_mail { file("/var/log/maillog" flush_lines(10)); };
#destination d_spol { file("/var/log/spooler"); };
#destination d_boot { file("/var/log/boot.log"); };
#destination d_cron { file("/var/log/cron"); };
#destination d_kern { file("/var/log/kern"); };
#destination d_mlal { usertty("*"); };
#
#filter f_kernel     { facility(kern); };
#filter f_default    { level(info..emerg) and
#                        not (facility(mail)
#                        or facility(authpriv) 
#                        or facility(cron)); };
#filter f_auth       { facility(authpriv); };
#filter f_mail       { facility(mail); };
#filter f_emergency  { level(emerg); };
#filter f_news       { facility(uucp) or
#                        (facility(news) 
#                        and level(crit..emerg)); };
#filter f_boot   { facility(local7); };
#filter f_cron   { facility(cron); };
#
#log { source(s_tcp_net); filter(f_kernel); destination(d_cons); };
#log { source(s_tcp_net); filter(f_kernel); destination(d_kern); };
#log { source(s_tcp_net); filter(f_default); destination(d_mesg); };
#log { source(s_tcp_net); filter(f_auth); destination(d_auth); };
#log { source(s_tcp_net); filter(f_mail); destination(d_mail); };
#log { source(s_tcp_net); filter(f_emergency); destination(d_mlal); };
#log { source(s_tcp_net); filter(f_news); destination(d_spol); };
#log { source(s_tcp_net); filter(f_boot); destination(d_boot); };
#log { source(s_tcp_net); filter(f_cron); destination(d_cron); };


filter f_wolk0 { match("wolk-trace0" value("PROGRAM") value("MSG") value("MSGHDR")); };
destination d_debug0 {
        file("/disk1/log0/$YEAR/$MONTH/$DAY/$HOUR.log"
        owner( root ) group( root ) perm ( 0777 ) dir_perm( 0777 ) create_dirs ( yes )
	template ( "${HOST}|$MESSAGE\n" ) );
};
log { source(s_tcp_net); filter(f_wolk0); destination(d_debug0); };

filter f_wolk1 { match("wolk-trace1" value("PROGRAM") value("MSG") value("MSGHDR")); };
destination d_debug1 {
        file("/disk1/log1/$YEAR/$MONTH/$DAY/$HOUR.log"
        owner( root ) group( root ) perm ( 0777 ) dir_perm( 0777 ) create_dirs ( yes )
	template ( "${HOST}|$MESSAGE\n" ) );
};
log { source(s_tcp_net); filter(f_wolk1); destination(d_debug1); };

filter f_wolk2 { match("wolk-trace2" value("PROGRAM") value("MSG") value("MSGHDR")); };
destination d_debug2 {
        file("/disk1/log2/$YEAR/$MONTH/$DAY/$HOUR.log"
        owner( root ) group( root ) perm ( 0777 ) dir_perm( 0777 ) create_dirs ( yes )
	template ( "${HOST}|$MESSAGE\n" ) );
};
log { source(s_tcp_net); filter(f_wolk2); destination(d_debug2); };

filter f_wolk3 { match("wolk-trace3" value("PROGRAM") value("MSG") value("MSGHDR")); };
destination d_debug3 {
        file("/disk1/log3/$YEAR/$MONTH/$DAY/$HOUR.log"
        owner( root ) group( root ) perm ( 0777 ) dir_perm( 0777 ) create_dirs ( yes )
	template ( "${HOST}|$MESSAGE\n" ) );
};
log { source(s_tcp_net); filter(f_wolk3); destination(d_debug3); };

filter f_wolk4 { match("wolk-trace4" value("PROGRAM") value("MSG") value("MSGHDR")); };
destination d_debug4 {
        file("/disk1/log4/$YEAR/$MONTH/$DAY/$HOUR.log"
        owner( root ) group( root ) perm ( 0777 ) dir_perm( 0777 ) create_dirs ( yes )
	template ( "${HOST}|$MESSAGE\n" ) );
};
log { source(s_tcp_net); filter(f_wolk4); destination(d_debug4); };

filter f_wolk5 { match("wolk-trace5" value("PROGRAM") value("MSG") value("MSGHDR")); };
destination d_debug5 {
        file("/disk1/log5/$YEAR/$MONTH/$DAY/$HOUR.log"
        owner( root ) group( root ) perm ( 0777 ) dir_perm( 0777 ) create_dirs ( yes )
	template ( "${HOST}|$MESSAGE\n" ) );

};
log { source(s_tcp_net); filter(f_wolk5); destination(d_debug5); };

filter f_wolk6 { match("wolk-trace6" value("PROGRAM") value("MSG") value("MSGHDR")); };
destination d_debug6 {
        file("/disk1/log6/$YEAR/$MONTH/$DAY/$HOUR.log"
        owner( root ) group( root ) perm ( 0777 ) dir_perm( 0777 ) create_dirs ( yes )
	template ( "${HOST}|$MESSAGE\n" ) );
};
log { source(s_tcp_net); filter(f_wolk6); destination(d_debug6); };

# vim:ft=syslog-ng:ai:si:ts=4:sw=4:et:
