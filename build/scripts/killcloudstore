#!/usr/bin/php
<?php
include "storage.php";
error_reporting(E_ERROR);
define('MAX_PROCESS_NUM', 100);
define('TIMEOUT',120);

function myexec($cmd, $run) {
	echo "$cmd\n";
	if ( $run ) {
		$output = array();
		exec($cmd, $output);
		if ( count($output) > 0 ) {
			print_r($output);
		}
	}
}


function get_network($stage, $restart = false) {
    if ( $restart == "restart" ) {
        $ts = time();
	$sql = "update cloudstorenetwork set networkID = '$ts' where stage = '$stage'";
	echo "$sql\n";
	if ( $res = mysql_query($sql) ) {
		echo "$sql\n";
	} else {
		echo mysql_error()."$sql\n";
	}
   }
   $sql = "select networkID, consensusAlgorithm from cloudstorenetwork where stage = '$stage'";
   if ( $res = mysql_query($sql) ) {
	while ( $a = mysql_fetch_object($res) ) {
		return $a;
	}
   } else {
	echo mysql_error();
   }
   echo "networkID not found: $sql\n";
   exit(0);
}

function get_nodes()
{
	$nodes = json_decode('[{
				"owner": "0x545DF6FD6811dc32397eAe8d218fc4b29681Eb62",
				"valueInt": 10000,
				"httpport": "HTTPPORT",
				"region": 1,
				"pubkey": "03d67104e65b61fca1fc73a74175667c11f16c037fa8e414499189df9d68706aca"
			},
			{
	 			"owner": "0x8520F2Be32A14fd8EBA2773A23EcD1eBd2290b99",
				"valueInt": 10000,
				"httpport": "HTTPPORT",
				"region": 1,
				"pubkey": "036d11b37ef4fc909ae1ec6c63584f99843f04ea9466730f8e58950c8c7262e693"
			},
			{
				"owner": "0x103618B5e39bF6B7FD9aE71960414b4a1f5e6571",
				"valueInt": 10000,
				"httpport": "HTTPPORT",
				"region": 1,
				"pubkey": "0294dd98401cf6ca0418580bb77ad0606a35ae8f442b22ab0f81011d8d2c78e70f"
			},
			{
				"owner": "0xdCe6c2b9C28389Ad654570bd5A0FD351Fb1027d6",
				"valueInt": 10000,
				"httpport": "HTTPPORT",
				"region": 4,
				"pubkey": "02d9d5b902798f5c42901f3fd993e58a9fb2ded12c3996e2a3849d4fdfcd0c3516"
			},
			{
	 			"owner": "0xF18A8ca22d01899FA255F55C349d5974C64D7Ef6",
				"valueInt": 10000,
				"httpport": "HTTPPORT",
				"region": 3,
				"pubkey": "03ae6aee36993a5b48cf3a36a6cf10cf5e767e56e253d232f8462a4b74ee3374d0"
			},
			{
	 			"owner": "0x70A6D3bb949839867a5DcED66d66746be69D9a34",
				"valueInt": 10000,
				"httpport": "HTTPPORT",
				"region": 2,
				"pubkey": "03142e89f6535bc36c05215eec0938234c06e91cb9b0e7977706b72775463b252b"
			},
			{
					"owner": "0xFA24467CABd1820694969904b91E336C92761D34",
					"valueInt": 10000,
					"httpport": "HTTPPORT",
					"region": 1,
					"pubkey": "0314f2a4e39998a282636f1ee1e8e4ed29bd2b1285f9dad01837ac1453ea43d648"
			},
			{
					"owner": "0xC30Ad35a90aB3F39805900125705D1d40E7A961c",
					"valueInt": 10000,
					"httpport": "HTTPPORT",
					"region": 1,
					"pubkey": "02afcb05e7b74b3124443f49044ea8c2d94f06824dee0eda489806b98c62673d01"
			}]');
			return($nodes);
}

getWolkDatabase(true);

// killstaging 4 kill
$stage = isset($argv[1]) ? $argv[1] : 1;
$restart = "kill"; 
$projecttable = isset($argv[3]) ? $argv[3] : "project";
$ts = time();

$nodes = get_nodes();
$sql = "select servers.publicip, servers.datacenter, servers.cloudprovider, servers.consensus, servers.nodenumber, servers.dns from cloudstore as servers order by servers.nodenumber";
$n = 0;
if ( $res = mysql_query($sql) ) {
	while ( $a = mysql_fetch_object($res) ) {
		$servers[] = $a;
		$nodenumber = $a->nodenumber;
		if ( ( $n < count($nodes) ) && ( $a->consensus > 0 ) ) {
			$nodes[$n]->consensusip = "c$nodenumber.wolk.com";
			// $nodes[$n]->storageip = "s$nodenumber-8$stage.wolk.com";
			$nodes[$n]->storageip = "c$nodenumber.wolk.com";
			$n++;
		} else if ( ( $nodenumber < 8 )){
			$dns = $a->dns;
			echo $nodenumber . "\t". $dns . "\n";
			$nodes[$nodenumber]->storageip = "$dns.wolk.com";
		}
	}
} else {
	echo mysql_error();
	exit(0);
}

$numOrigNodes = count($nodes);
while( $n <= $numOrigNodes ) {
 	unset($nodes[$n]);
	$n++;
}
$nodes_json = json_encode($nodes);
$network = get_network($stage, $restart);
$networkid = $network->networkID;
$consensusAlgorithm = $network->consensusAlgorithm;
$httpport = 80 + $stage;
$rpcport = 9900 + $stage;
$p2pport = 30300 + 1000*$stage;
$maindir = "/root/go/src/github.com/wolkdb/cloudstore";
$creddir = "$maindir/wolk/cloud/credentials";

$genesistemplate = "$creddir/genesis-staging.json";
$genesis = ( $stage == 0 ) ? "$creddir/genesis.json" : "$creddir/genesis$stage.json";
$seed_16 = "0x".substr(sha1($networkid).md5($networkid), 0, 64);
$seed_64 = base64_encode(hex2bin(substr($seed_16, 2)));
$httpport = ( $stage == 0 ) ? 443 : 80 + $stage;
$nodes_data = str_replace(array("\"HTTPPORT\""), array($httpport), $nodes_json);
$genesisdata = str_replace(array( "HTTPPORT", "SEED", "NETWORKID", "NODES"), array($httpport, $seed_64, $networkid, $nodes_data), file_get_contents($genesistemplate));
file_put_contents($genesis, $genesisdata);

$ts = date("Y-m-d", time()).$stage;
$SkipLocalGetChunk = 0;
echo "start " . date("Y/m/d H:i:s") ." Seed $seed_16 ($seed_64)\n";
$args[networkID] = $networkid;
$args[servers] = $servers;
$args[stage] = $stage;
$args[restart] = $restart;
$mp = new MultiProcess($args);
$ext = new extFunc();
$mp->setWork(array($ext, "wolk"));
$mp->run();
echo "finish " . date("Y/m/d H:i:s") ."\n";

class MultiProcess
{
	private $args;
	private $maxProcessNum;

	public function setWork($callback)
	{
		$this->work = $callback;
	}

	public function __construct($args)
	{
	$maxProcessNum = MAX_PROCESS_NUM;
		$this->args		  = $args;
		$this->maxProcessNum = $maxProcessNum;

		pcntl_signal(SIGTERM, array($this, 'sigHandler'));
		pcntl_signal(SIGHUP,  array($this, 'sigHandler'));
		pcntl_signal(SIGUSR1, array($this, 'sigHandler'));
		pcntl_signal(SIGALRM, array($this, 'sigHandler'));

	}

	private function sigHandler($signo)
	{
		switch ($signo)
		{
			case SIGTERM:
				echo "shutdown...\n";
				exit;
				break;
			case SIGHUP:
				echo "reboot...\n";
				break;
			case SIGUSR1:
				echo "SIGUSER($signo)\n";
				break;
			case SIGALRM:
				echo "alarm...\n";
				exit;
				break;
			default:
				echo "Other signal: " . $signo . "\n";
		}
	}

	public function run()
	{

		$pchild = 0;
		$pnum = 0;
		$pend = 0;

		$servers = $this->args[servers];
		$servercount;
		foreach ($servers as $i => $s) {
			$servercount++;
			if( $pchild < $this->maxProcessNum)
			{
				$pid = pcntl_fork();

				if ($pid == -1)
				{
					throw new Exception('Failed forc process.');
				}
				else if ($pid)
				{
					$pchild++;
					$pnum++;
				}
				else
				{
					$arg[servers] = $s;
					$arg[stage] = $this->args[stage];
					$arg[restart] = $this->args[restart];

					pcntl_alarm(TIMEOUT);

					if (!is_array($this->work))
					{
						$function = $this->work;
						$function($arg);
					}
					else
					{
						$obj  = $this->work[0];
						$func = $this->work[1];
						$obj->$func($arg);
					}
					exit(0);
				}
			}
			else
			{
				echo "waiting.\n";
				$pid = pcntl_waitpid(-1, $status, WUNTRACED);
				$pchild--;
				$pend++;

				echo "$pid stopped.\n";
			}
		}
		echo "kicked all.\n";
		while (pcntl_waitpid(0, $status) != -1) {
			$status = pcntl_wexitstatus($status);
			//echo "Child $status completed\n";
		}
	}
}

class extFunc
{
	function wolk($args)
	{
		global $seed_64;
		global $consensusAlgorithm;
		global $networkid;
		$stage = $args[stage];
		$s = $args[servers];
		$restart = $args[restart];
		$httpport = 80 + $stage;
		if ( $stage == 0 ) {
			$httpport = 443;
		}
		$rpcport = 9900 + $stage;
		$p2pport = 30300 + 1000*$stage;
		$maindir = "/root/go/src/github.com/wolkdb/cloudstore";
		$creddir = "$maindir/wolk/cloud/credentials";
		$MicrosoftAzureAccountName = $s->MicrosoftAzureAccountName;
		$MicrosoftAzureAccountKey = $s->MicrosoftAzureAccountKey;
		$AlibabaAccessKeyId = $s->AlibabaAccessKeyId;
		$AlibabaAccessKeySecret = $s->AlibabaAccessKeySecret;
		$AlibabaEndpointURL = $s->AlibabaEndpointURL;

		$hostname = $s->hostname;
		$consensusidx = $s->nodenumber;
		$server = $s->publicip;
		$dc = $s->datacenter;
		if ( $s->cloudprovider == "gc" ) {
		   $project = $s->projectID;
		   $region = $s->region;
	 	} else {
			$region = $s->datacenter;
  		}
		$toml = array();
		echo "consensus " .  $s->consensus . "consensusidx ". $consensusidx . "server". $server. "\n";
		$toml[] = "ConsensusIdx = ".$consensusidx;
		if ( $s->consensus > 0 ) {
			$toml[] = "NodeType = \"consensus\"";
		} else {
			$toml[] = "NodeType = \"storage\"";
			$toml[] = "TrustedNode = \"c$consensusidx.wolk.com\"";
		}
		$genesis = ( $stage == 0 ) ? "$creddir/genesis.json" : "$creddir/genesis$stage.json";
		$toml[] = "ConsensusAlgorithm = \"$consensusAlgorithm\"";
		$toml[] = "GenesisFile = \"$genesis\"";
		if ( $SkipLocalGetChunk > 0 ) {
			$toml[] = "SkipLocalGetChunk = $SkipLocalGetChunk";
		}
		$toml[] = "NetworkID = $networkid";
		$toml[] = "SSLCertFile = \"/etc/ssl/certs/wildcard.wolk.com/www.wolk.com.crt\"";
		$toml[] = "SSLKeyFile = \"/etc/ssl/certs/wildcard.wolk.com/www.wolk.com.key\"";
		if ( $s->cloudprovider == "gc" ) {
			$toml[] = "Provider = \"google_datastore\"";
			$toml[] = "Region = \"$region\"";
			$toml[] = "GoogleDatastoreProject = \"$project\"";
			$toml[] = "GoogleDatastoreCredentials = \"/root/go/src/github.com/wolkdb/cloudstore/wolk/cloud/credentials/google.json\"";
		} else if ( $s->cloudprovider == "bt" ) {
			$toml[] = "Provider = \"google_bigtable\"";
			$toml[] = "GoogleBigTableCredentials = \"/root/go/src/github.com/wolkdb/cloudstore/wolk/cloud/credentials/wolk-bt.json\"";
			$toml[] = "GoogleBigTableProject = \"wolk-1307\"";
			$toml[] = "GoogleBigTableInstance = \"wolk-bt\"";
		} else if ( $s->cloudprovider == "azure" ) {
			$toml[] = "Provider = \"microsoft_azure\"";
			$toml[] = "Region = \"$region\"";
			$toml[] = "MicrosoftAzureAccountName = \"$MicrosoftAzureAccountName\"";
			$toml[] = "MicrosoftAzureAccountKey = \"$MicrosoftAzureAccountKey\"";
		} else if ( $s->cloudprovider == "alibaba" ) {
			$toml[] = "Provider = \"alibaba_tablestore\"";
			$toml[] = "AlibabaRegion = \"$region\"";
			$toml[] = "AlibabaAccessKeyId = \"$AlibabaAccessKeyId\"";
			$toml[] = "AlibabaAccessKeySecret = \"$AlibabaAccessKeySecret\"";
			$toml[] = "AlibabaEndpointURL = \"$AlibabaEndpointURL\"";
		} else {
			$toml[] = "Provider = \"amazon_dynamo\"";
			$toml[] = "AmazonRegion = \"$region\""; // us-west-2
			$toml[] = "AmazonCredentials = \"/root/.aws/credentials\"";
		}
		$tomlstr = implode("\n", $toml);
		// set up a list of commands
		$binary = ( $stage == 0 ) ? "wolk" : "wolk$stage";
		$logfile = "/var/log/$binary.log";

		// copy the TOML file
		$cp_toml = "/tmp/$binary$server.toml";
		$dst_toml = "$maindir/$binary.toml";
		file_put_contents($cp_toml, $tomlstr);

		// kill pre-existing binary running, remove pre-existing log
		$cmds = array();
		$cmds[] = "ssh $server 'kill -9 $(pidof $binary)' &";
		foreach ($cmds as $cmd) {
   			myexec($cmd, true);
		}
	}
}
?>
