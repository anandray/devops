#!/usr/bin/php
<?php

error_reporting(E_ERROR);

function getWolkDatabase($force = false)
{
      $hname = php_uname('n'); // gethostname();
      $theDB = mysql_connect("db03", "db", "1wasb0rn2", $force);
      mysql_select_db("wolk", $theDB);
}

getWolkDatabase(true);

$sql = "select publicip from servers where pushwolk=1";
if ( $res = mysql_query($sql) ) {
  while ( $a = mysql_fetch_object($res) ) {
    $servers[] = $a->publicip;
  }
}
if ( isset($argv[1]) ) {
  $act = $argv[1];
} else {
  echo "pushservicechange init - copies the wolk.service locally to all servers
pushservicechange list - lists the presence of the wolk service one-by-one
pushservicechange chkconfig - turns the service ON with chkconfig
pushservicechange reload - reloads the service after an init, but does NOT restart
pushservicechange restart - restarts the service  (as would would be required in a pushwolk)\n";
  exit(0);
}

echo "$act\n";
foreach ($servers as $server) {
  switch ($act) {
  case "chkconfig":
    $cmd = "sudo ssh -q $server chkconfig wolk on 2>&1 &";
    break;
  case "reload":
    $cmd = "sudo ssh -q $server hostname && sudo ssh -q $server systemctl daemon-reload 2>&1 &";
    break;
  case "list":
    $cmd = "sudo ssh -q $server systemctl list-unit-files wolk.service 2>&1 &";
    break;
  case "init":
    $cmd = "scp -C -p wolk.service $server:/usr/lib/systemd/system/ 2>&1 &";
   break;
  case "restart":
    $cmd = "sudo ssh -q $server hostname && sudo ssh -q $server systemctl restart wolk.service 2>&1 &";
    break;
  }
  $a = array();
  echo "$cmd\n";
  exec($cmd, $a);
  print_r($a);
}

?>