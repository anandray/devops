'use strict';

const Web3 = require('web3');
class WOLK {
    constructor(provider) {
        this.web3 = new Web3();
        let that = this;
        this.web3.setProvider(new Web3.providers.HttpProvider(provider));

        this.web3._extend.formatters.commonHashFormatter = function (hash) {
            if (/^0x[0-9a-f]{64}$/i.test(hash)) {
                return hash;
            }
            throw 'invalid hash';
        };

        this.web3._extend.formatters.plasmaTxnFormatter = function(txn) {
            var tokenID = txn.tokenId;
            tokenID = "0x" + tokenID.toString(16);
            if (!txn.tokenId || !/^0x[0-9a-f]{16}$/i.test(tokenID)) {
                throw 'invalid tokenId';
            }

            if (txn.denomination && !Number.isInteger(txn.denomination)) {
                throw 'invalid denomination';
            }

            if (txn.depositIndex && !Number.isInteger(txn.depositIndex)) {
                throw 'invalid depositIndex';
            }

            if (txn.prevBlock && !Number.isInteger(txn.prevBlock)) {
                throw 'invalid prevBlock';
            }

            if (txn.pTransfer && !Number.isInteger(txn.pTransfer)) {
                throw 'invalid pTransfer';
            }

            if (txn.prevOwner) {
                if (!/^0x[0-9a-f]{40}$/i.test(txn.prevOwner)) {
                    throw 'invalid prevOwner';
                }
            }

            if (!txn.recipient || !/^0x[0-9a-f]{40}$/i.test(txn.recipient)) {
                throw 'invalid recipient';
            }

            return txn;
        }

        this.web3._extend.formatters.btoa = function (input) {
            if (typeof input === 'string' || (input && input.constructor && input.constructor.name === 'String')) {
                return Buffer.from(input).toString('base64');
            }
            throw new Error('input needs to be string');
        };

        this.web3._extend.formatters.atob = function (output) {
            if (typeof output === 'string' || (output && output.constructor && output.constructor.name === 'String')) {
                return Buffer.from(output, 'base64').toString();
            }
            else {
              return output;
            }
        };


        this.web3._extend({
            property: 'nosql',
            methods: [
                new this.web3._extend.Method({
                    name: 'getKey',
                    call: 'nosql_getKey',
                    params: 3,
                    inputFormatter: [ null, this.web3._extend.formatters.btoa, this.web3._extend.formatters.inputBlockNumberFormatter ],
                    outputFormatter: function(output) {
                        var newOutput = output;
                        if (that.web3._extend.formatters.atob(output.value)) {
                            newOutput.value = that.web3._extend.formatters.atob(output.value);
                        }
                        return newOutput;
                    }
                }),
                new this.web3._extend.Method({
                    name: 'setKey',
                    call: 'nosql_setKey',
                    params: 3,
                    inputFormatter: [ null, this.web3._extend.formatters.btoa, this.web3._extend.formatters.btoa ]
                }),
                new this.web3._extend.Method({
                    name: 'getAnchorTransactionHash',
                    call: 'nosql_getAnchorTransactionHash',
                    params: 2,
                    inputFormatter: [ null, null ]
                }),
                new this.web3._extend.Method({
                    name: 'latestBlockNumber',
                    call: 'nosql_latestBlockNumber',
                    params: 1,
                    inputFormatter: [ null ]
                })
            ]
        });

        this.web3._extend({
            property: 'sql',
            methods: [
                new this.web3._extend.Method({
                    name: 'exec',
                    call: 'sql_exec',
                    params: 2
                }),
                new this.web3._extend.Method({
                    name: 'latestBlockNumber',
                    call: 'sql_latestBlockNumber',
                    params: 1,
                    inputFormatter: [ null ]
                })
            ]
        });

        this.web3._extend({
            property: 'plasma',
            methods: [
                new this.web3._extend.Method({
                    name: 'processDeposit',
                    call: 'plasma_processDeposit',
                    params: 2,
                    inputFormatter: [ null, null ]
                }),
                new this.web3._extend.Method({
                    name: 'getBlockchainID',
                    call: 'plasma_getBlockchainID',
                    params: 2,
                    inputFormatter: [ null, null ]
                }),
                new this.web3._extend.Method({
                    name: 'getPlasmaBlock',
                    call: 'plasma_getPlasmaBlock',
                    params: 1,
                    inputFormatter: [ null ]
                }),
                new this.web3._extend.Method({
                    name: 'getAnchorTransactionProof',
                    call: 'plasma_getAnchorTransactionProof',
                    params: 1,
                    inputFormatter: [ null ]
                }),
                new this.web3._extend.Method({
                    name: 'getPlasmaToken',
                    call: 'plasma_getPlasmaToken',
                    params: 2,
                    inputFormatter: [ null, null ]
                }),
                new this.web3._extend.Method({
                    name: 'sendPlasmaTransaction',
                    call: 'plasma_sendPlasmaTransaction',
                    params: 1,
                    inputFormatter: [ null ]
                }),
                new this.web3._extend.Method({
                    name: 'getPlasmaTransactionReceipt',
                    call: 'plasma_getPlasmaTransactionReceipt',
                    params: 1,
                    inputFormatter: [ null ]
                }),
                new this.web3._extend.Method({
                    name: 'getPlasmaTransactionProof',
                    call: 'plasma_getPlasmaTransactionProof',
                    params: 1,
                    inputFormatter: [ null ]
                }),
                new this.web3._extend.Method({
                    name: 'sendAnchorTransaction',
                    call: 'plasma_sendAnchorTransaction',
                    params: 1,
                    inputFormatter: [ null ]
                }),
                new this.web3._extend.Method({
                    name: 'getPlasmaBalance',
                    call: 'plasma_getPlasmaBalance',
                    params: 2,
                    inputFormatter: [ null, null]
                }),
            ]
        });
    }

    /* plasma */
    processDeposit(tokenID, tokenInfo, callback) {
        if (typeof callback === 'function') {
            return this.web3.plasma.processDeposit(tokenID, tokenInfo, function(err, result) {
                return callback(err, result);
            });        
        }
        else {
            return this.web3.plasma.processDeposit(tokenID, tokenInfo);
        }
    }

    getBlockchainID(tokenID, depositIndex, callback) {
        if (typeof callback === 'function') {
            return this.web3.plasma.getBlockchainID(tokenID, depositIndex, function(err, result) {
                return callback(err, result);
            });
        }
        else {
            return this.web3.plasma.getBlockchainID(tokenID, depositIndex);
        }
    }

    getPlasmaBlock(blockNumber, callback) {
        if (typeof callback === 'function') {
            return this.web3.plasma.getPlasmaBlock(blockNumber, function(err, result) {
                return callback(err, result);
            });
        }
        else {
            return this.web3.plasma.getPlasmaBlock(blockNumber);
        }

    }

    getAnchorTransactionProof(anchorTxHash, callback) {
        if (typeof callback === 'function') {
            return this.web3.plasma.getAnchorTransactionProof(anchorTxHash, function(err, result) {
                return callback(err, result);
            });

        }
        else {
            return this.web3.plasma.getAnchorTransactionProof(anchorTxHash);
        }        
    }

    getPlasmaBalance(address, blockNumber, callback) {
        if (typeof callback === 'function') {
            return this.web3.plasma.getPlasmaBalance(address, blockNumber, function(err, result) {
                return callback(err, result);
            });

        }
        else {
            return this.web3.plasma.getPlasmaBalance(address, blockNumber);
        }        
    }

    getPlasmaToken(tokenID, blockNumber, callback) {
        if (typeof callback === 'function') {
            return this.web3.plasma.getPlasmaToken(tokenID, blockNumber, function(err, result) {
                return callback(err, result);
            });
        }
        else {
            return this.web3.plasma.getPlasmaToken(tokenID, blockNumber);
        }        
    }

    sendPlasmaTransaction(plasmaTx, callback) {
        if (typeof callback === 'function') {
            return this.web3.plasma.sendPlasmaTransaction(plasmaTx, function(err, result) {
                return callback(err, result);
            });
        }
        else {
            return this.web3.plasma.sendPlasmaTransaction(plasmaTx);
        }        

    }

    getPlasmaTransactionProof(plasmaTxHash, callback) {
        if (typeof callback === 'function') {
            return this.web3.plasma.getPlasmaTransactionProof(plasmaTxHash, function(err, result) {
                return callback(err, result);
            });
        }
        else {
            return this.web3.plasma.getPlasmaTransactionProof(plasmaTxHash);
        }        

    }

    getPlasmaTransactionReceipt(plasmaTxHash, callback) {
        if (typeof callback === 'function') {
            return this.web3.plasma.getPlasmaTransactionReceipt(plasmaTxHash, function(err, result) {
                return callback(err, result);
            });
        }
        else {
            return this.web3.plasma.getPlasmaTransactionReceipt(plasmaTxHash);
        }        

    }

    sendAnchorTransaction(anchorTx, callback) {
        if (typeof callback === 'function') {
            return this.web3.plasma.sendAnchorTransaction(anchorTx, function(err, result) {
                return callback(err, result);
            });
        }
        else {
            return this.web3.plasma.sendAnchorTransaction(anchorTx);
        }        
        
    }

    /* nosql chain */
    getKey(blockchainid, key, blocknumber, callback) {
        if (typeof callback === 'function') {
            return this.web3.nosql.getKey(blockchainid, key, blocknumber, function(err, result) {
                return callback(err, result);
            });
        }
        else {
            return this.web3.nosql.getKey(blockchainid, key, blocknumber);
        }        

    }

    setKey(blockchainid, key, value, callback) {
        if (typeof callback === 'function') {
            return this.web3.nosql.setKey(blockchainid, key, value, function(err, result) {
                return callback(err, result);
            });
        }
        else {
            return this.web3.nosql.setKey(blockchainid, key, value);
        }        

    }

    nosqlLatestBlockNumber(blockchainid, callback) {     
        if (typeof callback === 'function') {
            return this.web3.nosql.latestBlockNumber(blockchainid, function(err, result) {
                return callback(err, result);
            });
        }
        else {
            return this.web3.nosql.latestBlockNumber(blockchainid);
        }
        
    }

    getAnchorTransactionHash(blockchainid, blocknumber, callback) {
        if (typeof callback === 'function') {
            return this.web3.nosql.getAnchorTransactionHash(blockchainid, blocknumber, function(err, result) {
                return callback(err, result);
            });
        }
        else {
            return this.web3.nosql.getAnchorTransactionHash(blockchainid, blocknumber);
        }        

    }


    /* sql chain */
    exec(blockchainid, txn, callback) {
        if (typeof callback === 'function') {
            return this.web3.sql.exec(blockchainid, txn, function(err, result) {
                return callback(err, result);
            });
        }
        else {
            return this.web3.sql.exec(blockchainid, txn);
        }        

    }

    sqlLatestBlockNumber(blockchainid, callback) {
        if (typeof callback === 'function') {
            return this.web3.sql.latestBlockNumber(blockchainid, function(err, result) {
                return callback(err, result);
            });
        }
        else {
            return this.web3.sql.latestBlockNumber(blockchainid);
        }        
    }
}

if (typeof window !== 'undefined' && typeof window.WOLK === 'undefined') {
    window.WOLK = WOLK;
}

module.exports = WOLK;
